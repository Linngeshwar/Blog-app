# Generated by Django 5.1.4 on 2025-07-15 13:04

from django.db import migrations


def populate_user_foreign_keys(apps, schema_editor):
    """Migrate username strings to User foreign keys"""
    User = apps.get_model('auth', 'User')
    BlogPost = apps.get_model('blog', 'BlogPost')
    Comment = apps.get_model('blog', 'Comment')
    Upvote = apps.get_model('blog', 'Upvote')
    Downvote = apps.get_model('blog', 'Downvote')
    
    # Migrate BlogPost authors
    for post in BlogPost.objects.all():
        if post.author:
            try:
                user = User.objects.get(username=post.author)
                post.author_user = user
                post.save()
            except User.DoesNotExist:
                print(f"Warning: User '{post.author}' not found for post '{post.title}'")
    
    # Migrate Comment users
    for comment in Comment.objects.all():
        if comment.user:
            try:
                user = User.objects.get(username=comment.user)
                comment.user_fk = user
                comment.save()
            except User.DoesNotExist:
                print(f"Warning: User '{comment.user}' not found for comment {comment.id}")
    
    # Migrate Upvote users
    for upvote in Upvote.objects.all():
        if upvote.user:
            try:
                user = User.objects.get(username=upvote.user)
                upvote.user_fk = user
                upvote.save()
            except User.DoesNotExist:
                print(f"Warning: User '{upvote.user}' not found for upvote {upvote.id}")
    
    # Migrate Downvote users
    for downvote in Downvote.objects.all():
        if downvote.user:
            try:
                user = User.objects.get(username=downvote.user)
                downvote.user_fk = user
                downvote.save()
            except User.DoesNotExist:
                print(f"Warning: User '{downvote.user}' not found for downvote {downvote.id}")


def reverse_user_foreign_keys(apps, schema_editor):
    """Reverse migration - populate username strings from User foreign keys"""
    BlogPost = apps.get_model('blog', 'BlogPost')
    Comment = apps.get_model('blog', 'Comment')
    Upvote = apps.get_model('blog', 'Upvote')
    Downvote = apps.get_model('blog', 'Downvote')
    
    # Reverse BlogPost authors
    for post in BlogPost.objects.all():
        if post.author_user:
            post.author = post.author_user.username
            post.save()
    
    # Reverse Comment users
    for comment in Comment.objects.all():
        if comment.user_fk:
            comment.user = comment.user_fk.username
            comment.save()
    
    # Reverse Upvote users
    for upvote in Upvote.objects.all():
        if upvote.user_fk:
            upvote.user = upvote.user_fk.username
            upvote.save()
    
    # Reverse Downvote users
    for downvote in Downvote.objects.all():
        if downvote.user_fk:
            downvote.user = downvote.user_fk.username
            downvote.save()


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0008_alter_blogpost_options_alter_comment_options_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_user_foreign_keys, reverse_user_foreign_keys),
    ]
